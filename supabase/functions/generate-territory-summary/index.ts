
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { Configuration, OpenAIApi } from "https://esm.sh/openai@3.3.0";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
if (!openAIApiKey) {
  console.error("Missing OPENAI_API_KEY environment variable.");
}

const configuration = new Configuration({
  apiKey: openAIApiKey,
});
const openai = new OpenAIApi(configuration);

serve(async (req: Request) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  if (!openAIApiKey) {
    return new Response(JSON.stringify({ error: "OpenAI API key not configured." }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }

  try {
    const {
      analysis,
      cbsaData,
      topMarketCount = 10
    } = await req.json();

    if (!analysis || !cbsaData || !analysis.criteriaColumns) {
      return new Response(JSON.stringify({ error: "Missing required analysis data for summary generation." }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    console.log("Received data for territory summary generation:", { 
      criteriaCount: analysis.criteriaColumns.length,
      marketCount: cbsaData.length 
    });

    // Calculate average scores for each market across all included criteria
    const marketScores = cbsaData.map(market => {
      const scores = analysis.criteriaColumns
        .filter(column => column.isIncludedInSignalScore)
        .map(column => {
          const score = column.scores.find(s => s.market === market.name);
          return score ? score.score : null;
        })
        .filter(score => score !== null);

      const averageScore = scores.length > 0 
        ? scores.reduce((sum, score) => sum + score, 0) / scores.length 
        : 0;

      return {
        market: market.name,
        state: market.state,
        population: market.population,
        averageScore,
        criteriaScores: analysis.criteriaColumns.map(column => {
          const score = column.scores.find(s => s.market === market.name);
          return {
            title: column.title,
            score: score?.score || null,
            reasoning: score?.reasoning || null
          };
        })
      };
    });

    // Sort by average score and take top markets
    const topMarkets = marketScores
      .sort((a, b) => b.averageScore - a.averageScore)
      .slice(0, topMarketCount);

    // Prepare criteria summaries
    const criteriaSummaries = analysis.criteriaColumns.map(column => ({
      title: column.title,
      prompt: column.prompt,
      logicSummary: column.logicSummary,
      analysisMode: column.analysisMode,
      isIncluded: column.isIncludedInSignalScore
    }));

    const prompt = `
You are writing a brief, executive-friendly summary based on the output of the Territory Targeter tool. The tool scores top U.S. CBSAs based on user-defined criteria. Each market includes reasoning behind the score.

Analysis Overview:
- Total markets analyzed: ${cbsaData.length}
- Number of scoring criteria: ${analysis.criteriaColumns.length}
- Top ${topMarketCount} markets selected for summary

Scoring Criteria Used:
${criteriaSummaries.map(criteria => 
  `- ${criteria.title}: ${criteria.prompt} (${criteria.analysisMode} analysis)${criteria.isIncluded ? '' : ' - EXCLUDED from final scoring'}`
).join('\n')}

Top Performing Markets:
${topMarkets.map((market, index) => 
  `${index + 1}. ${market.market} - Average Score: ${market.averageScore.toFixed(1)}/100
   Population: ${market.population.toLocaleString()}
   Key Insights: ${market.criteriaScores.filter(cs => cs.reasoning).map(cs => `${cs.title}: ${cs.reasoning}`).join('; ')}`
).join('\n\n')}

Instructions:
1. Focus on the top-performing markets based on average score, selecting no more than ${topMarketCount}.
2. Summarize why each market performed well using the provided reasoning.
3. Keep the tone plainspoken, professional, and practicalâ€”avoid data jargon.
4. Highlight patterns or themes among the top markets, if relevant.
5. Avoid recommending a specific course of action for any single market.
6. Close with this exact disclaimer: "This executive summary was generated by AI based on your inputs and scoring criteria. It should be reviewed by your internal stakeholders and used in conjunction with broader strategic considerations before making business decisions."

Structure your response as:
- Brief introduction mentioning the criteria used
- Top markets summary (5-8 markets maximum)
- Pattern analysis paragraph
- Disclaimer

Keep the entire summary concise and executive-friendly (400-600 words maximum).
    `;

    console.log("Sending prompt to OpenAI GPT-4o-mini. Prompt length:", prompt.length);

    const completion = await openai.createChatCompletion({
      model: "gpt-4o-mini",
      messages: [
        { 
          role: "system", 
          content: "You are a business analyst providing executive summaries for territory analysis. Follow the exact structure and tone specified in the prompt." 
        },
        { role: "user", content: prompt },
      ],
      temperature: 0.3,
      max_tokens: 1000,
    });

    const generatedSummary = completion.data.choices[0].message?.content?.trim();
    console.log("OpenAI response received. Summary length:", generatedSummary?.length);

    if (!generatedSummary) {
      throw new Error("OpenAI returned an empty summary.");
    }

    return new Response(JSON.stringify({ executiveSummary: generatedSummary }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-territory-summary function:', error.response ? error.response.data : error.message);
    return new Response(JSON.stringify({ error: `Failed to generate summary: ${error.message}` }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
